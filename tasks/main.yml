---

- name: 'Include os vars.'
  include_vars:
    dir: 'os'
    files_matching: "({{ ansible_system }}|{{ ansible_os_family }})\
                     (_{{ ansible_distribution }})?\
                     (_{{ ansible_distribution_major_version }})?.yml"

- name: 'Check ossec_config settings.'
  include_tasks: 'check_ossec_config.yml'
  loop: '{{ [wazuh_manager.ossec_config|default([])]|flatten }}'
  loop_control:
    loop_var: 'wazuh_ossec_config'

- include_tasks: "RedHat.yml"
  when:
    - 'ansible_os_family == "RedHat"'
    - 'ansible_distribution_major_version|int > 5'

- include_tasks: "Debian.yml"
  when: 'ansible_os_family == "Debian"'

- name: 'Install wazuh packages'
  changed_when: false
  package:
    pkg: '{{ wazuh_packages }}'
    state: 'latest'
  async: '{{ wazuh_async_timeout }}'
  poll: '{{ wazuh_async_poll }}'

- name: 'CentOS/RedHat 6 | Enabling python2.7 and sqlite3'
  replace:
    path: '/etc/init.d/wazuh-manager'
    regexp: 'echo -n "Starting Wazuh-manager: "'
    replace: 'echo -n "Starting Wazuh-manager (EL6): ";
              source /opt/rh/python27/enable;
              export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/var/ossec/framework/lib'
  when:
    - 'ansible_distribution in ["CentOS","RedHat"] and
       ansible_distribution_major_version|int == 6'
    - 'wazuh_cluster_enabled|default(false)'

- name: 'Get status of client.keys file.'
  register: 'check_keys'
  stat:
    get_attributes: false
    get_checksum: false
    get_mime: false
    path: '/var/ossec/etc/client.keys'

- name: 'Ensure client.keys exists and is group-writable.'
  file:
    group: 'ossec'
    mode: '0660'
    owner: 'root'
    path: '/var/ossec/etc/client.keys'
    state: '{{  check_keys.stat.exists|ternary("file","touch") }}'
  notify: 'restart wazuh-manager'

- name: 'Ensure ossec config dirs are user and group-writable.'
  file:
    mode: 'ug+rw'
    path: '/var/ossec/etc'
    recurse: true

- name: 'Generate ssl_manager cert and key.'
  args:
    creates: '{{ wazuh_ssl_cert|basename }}'
    chdir: '{{ wazuh_ssl_cert|dirname }}'
  command: >
    openssl req
     -days 365
     -keyout {{ wazuh_ssl_key }}
     -newkey rsa:1825
     -nodes
     -out {{ wazuh_ssl_cert }}
     -sha256
     -subj /CN={{ wazuh_manager_fqdn }}/
     -x509
  when:
    - 'wazuh_ssl_ca is defined'
    - 'wazuh_ssl_cert is defined'
    - 'wazuh_ssl_key is defined'

- name: 'Copy CA, SSL key and cert for authd'
  copy:
    src: "{{ item }}"
    dest: "/var/ossec/etc/{{ item|basename }}"
    mode: '0644'
  loop:
    - '{{ wazuh_ssl_ca|default("")|string }}'
    - '{{ wazuh_ssl_cert|default("")|string }}'
    - '{{ wazuh_ssl_key|default("")|string }}'
  when:
    - 'item is string'
    - 'item|length>0'
    - 'item|dirname != "/var/ossec/etc"'

- name: 'Verifying for old init authd service'
  register: 'old_authd_service'
  stat:
    path: '/etc/init.d/ossec-authd'

- name: 'Verifying for old systemd authd service'
  register: 'old_authd_service'
  stat:
    path: '/lib/systemd/system/ossec-authd.service'

- name: 'Ensure ossec-authd service is disabled'
  service:
    name: 'ossec-authd'
    enabled: false
    state: 'stopped'
  when: 'old_authd_service.stat.exists'

- name: 'Removing old init authd services'
  file:
    path: "{{ item }}"
    state: 'absent'
  loop:
    - '/etc/init.d/ossec-authd'
    - '/lib/systemd/system/ossec-authd.service'
  when: 'old_authd_service.stat.exists'

- name: 'Installing the local_rules.xml file.'
  include_role:
    name: 'xml'
  notify: 'restart wazuh-manager'
  vars:
    dest: '/var/ossec/etc/rules/local_rules.xml'
    group: 'ossec'
    header: '<!-- {{ wazuh_manual }}/ruleset/custom.html -->'
    mode: '0640'
    owner: 'root'
    schema: '{{ wazuh_rules_schema }}'
    value: '{{ wazuh_rules }}'

- name: 'Installing the local_decoder.xml file.'
  include_role:
    name: 'xml'
  notify: 'restart wazuh-manager'
  vars:
    dest: '/var/ossec/etc/decoders/local_decoder.xml'
    group: 'ossec'
    header: "<!-- {{ wazuh_manual }}\
             /ruleset/ruleset-xml-syntax/decoders.html -->"
    mode: '0640'
    owner: 'root'
    schema: '{{ wazuh_decoder_schema }}'
    value: '{{ wazuh_decoder }}'

- name: 'Populating the shared folders.'
  delegate_to: '{{ inventory_hostname }}'
  loop: '{{ wazuh_shared.keys() }}'
  synchronize:
    dest: '/var/ossec/etc/shared/{{ item }}/'
    rsync_opts: '-a --ignore-existing'
    src: '/var/ossec/etc/shared/default/'
  when:
    - 'item is string'
    - 'item|length>0'
    - 'item != "default"'

- name: 'Installing the shared agent configs.'
  include_role:
    name: 'xml'
  loop: '{{ wazuh_shared|dict2items }}'
  notify: 'restart wazuh-manager'
  vars:
    dest: '/var/ossec/etc/shared/{{ item.key }}/agent.conf'
    group: 'ossec'
    header: '<!-- {{ wazuh_reference }}/centralized-configuration.html -->'
    mode: '0640'
    owner: 'ossec'
    schema: '{{ wazuh_shared_schema }}'
    validate: '/var/ossec/bin/verify-agent-conf -f %s'
    value: '{{ item.value }}'

- name: 'Ossec-authd password'
  copy:
    content: '{{ wazuh_auth_pass }}'
    dest: '/var/ossec/etc/authd.pass'
    owner: 'ossec'
    group: 'ossec'
    mode: '0640'
  no_log: true
  notify: 'restart wazuh-manager'
  when:
    - 'wazuh_authd_pass is string'
    - 'wazuh_authd_pass|length>0'

- name: 'Checking alert log output settings'
  fail:
    msg: 'Please enable jsonout_output or alerts_log in global options.'
  when:
    - 'not wazuh_alerts_log_enabled|default(true)'
    - 'not wazuh_jsonout_output_enabled|default(false)'

- name: 'Configuring the ossec.conf file.'
  include_role:
    name: 'xml'
  vars:
    dest: '/var/ossec/etc/ossec.conf'
    group: 'ossec'
    header: '<!-- {{ wazuh_reference }}/ossec-conf -->'
    mode: '0644'
    notify: 'restart wazuh-manager'
    owner: 'root'
    schema: '{{ wazuh_manager_schema }}'
    value: '{{ wazuh_manager }}'

- name: 'Get .process_list file.'
  args:
    warn: false
  changed_when: false
  check_mode: false
  failed_when: false
  register: 'wazuh_process_list'
  command: '/bin/sh -c ". /var/ossec/bin/.process_list ; set | grep _DAEMON="'

- name: 'Enable ossec-agentlessd'
  command: '/var/ossec/bin/ossec-control enable agentless'
  notify: 'restart wazuh-manager'
  when:
    - '"AGENTLESS_DAEMON=''ossec-agentlessd''" not in wazuh_process_list.stdout'
    - 'wazuh_agentless_enabled|default(false)'

- name: 'Enable client-syslog'
  command: '/var/ossec/bin/ossec-control enable client-syslog'
  notify: 'restart wazuh-manager'
  when:
    - '"CSYSLOG_DAEMON=''ossec-csyslogd''" not in wazuh_process_list.stdout'
    - 'wazuh_syslog_enabled|default(false)'

- name: 'Enable ossec-authd'
  command: '/var/ossec/bin/ossec-control enable auth'
  notify: 'restart wazuh-manager'
  when:
    - '"AUTH_DAEMON=''ossec-authd''" not in wazuh_process_list.stdout'
    - 'wazuh_auth_enabled|default(false)'

- name: 'Enable ossec-integratord'
  command: '/var/ossec/bin/ossec-control enable integrator'
  notify: 'restart wazuh-manager'
  when:
    - '"INTEGRATOR_DAEMON=''ossec-integratord''" not in wazuh_process_list.stdout'
    - 'wazuh_integration_enabled|default(false)'

- name: 'Linux | Vuls integration deploy (runs in background, can take a while)'
  args:
    creates: '/var/ossec/wodles/vuls/config.toml'
  async: 3600
  command: '/var/ossec/wodles/vuls/deploy_vuls.sh
            {{ ansible_distribution|lower }}
            {{ ansible_distribution_major_version|int }}'
  poll: 0
  when: 'wazuh_vuls_enabled|default(false)'

- name: 'Wazuh-API User'
  htpasswd:
    group: 'root'
    name: '{{ item.key }}'
    owner: 'root'
    password: '{{ item.value }}'
    path: '/var/ossec/api/configuration/auth/user'
    state: 'present'
  loop: '{{ wazuh_api_users|dict2items }}'
  notify: 'restart wazuh-api'
  when:
    - 'wazuh_api_install'
    - 'wazuh_api_users is string'
    - 'wazuh_api_users|length>0'
    - 'not ( ansible_distribution in ["CentOS","RedHat"]
         and ansible_distribution_major_version|int < 6 )'

- name: 'Register agentless hosts.'
  args:
    argv: '{{ ["./register_host.sh","add",item]|flatten }}'
    chdir: '/var/ossec/agentless'
    register: 'wazuh_agentless_result'
  changed_when: '"*Host "+item.0+" added" in wazuh_agentless_result.stdout'
  command:
  failed_when: false
  loop: '{{ wazuh_agentless_hosts|dictsort }}'
  no_log: true
  when:
    - 'wazuh_agentless_enabled|default(false)'
    - 'item.0 is string'
    - 'item.0|length>0'

- name: 'Write CDB Lists'
  copy:
    content: '{{ item.value }}'
    dest: '/var/ossec/etc/lists/{{ item.key }}'
    owner: 'root'
    group: 'ossec'
    mode: '0640'
  loop: '{{ wazuh_cdb_lists|dict2items }}'
  notify:
    - 'rebuild cdb_lists'
    - 'restart wazuh-manager'
  when:
    - 'item.name is defined and item.name is string'
    - 'item.content is defined and item.content is string'

- name: 'Ensure Wazuh Manager is started and enabled'
  service:
    name: 'wazuh-manager'
    enabled: true
    state: 'started'

- name: 'Ensure Wazuh API service is started and enabled'
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:/var/ossec/framework/lib"
  service:
    name: 'wazuh-api'
    enabled: true
    state: 'started'
  when:
    - 'wazuh_api_install'
    - 'not ( ansible_distribution in ["CentOS","RedHat"]
         and ansible_distribution_major_version|int < 6 )'

- block:
    - include_tasks: 'RMRedHat.yml'
      when: 'ansible_os_family == "RedHat"'
    - include_tasks: 'RMDebian.yml'
      when: 'ansible_os_family == "Debian"'
  when: 'wazuh_repo_remove'
